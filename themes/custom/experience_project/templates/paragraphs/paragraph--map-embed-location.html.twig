{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'row',
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}
{# Set var for the type of content options to display on the map #}
{% set showTypes = content.field_content_display_types['#items'].getString() %}



{# get the lat and long of the location #}
{% set locationLat = paragraph.field_latitude_and_longitude.lat %}
{% set locationLon = paragraph.field_latitude_and_longitude.lon %}

{# the post code #}
{% set postalCode = paragraph.field_postcode.postal_code %}

{# build unique id for the div that houses the embed #}
{% set map_wrapper = 'map' ~ content.uuid.0|render|trim %}

{# get the value of the label of the taxonomy term selected on a term reference field - note starting with paragraph. #}
{% set areaName = paragraph.field_area.entity.label %}

{# the zoom level - old version using taxonomy #}
{# % set zoomLevel = content.field_zoom_level.0|render|trim % #}

{# the show all routes field is a text list type field. Here defining a variable with its key value  #}
{% if content.field_show_all_routes.0 is not empty %} 
  {% set showAllRoutes = content.field_show_all_routes['#items'].getString() %}
{% else %}
  {% set showAllRoutes = "true" %}
{% endif %}

{# // Sidepanel #}
{% set sidePanelLeft = content.field_left_sidepanel.0|render|trim  %}
{% set leftPanel %}
{% if sidePanelLeft == "closed" %}'closed'{% elseif sidePanelLeft == "closed_mobile" %}'closed_mobile'{% elseif sidePanelLeft == "false" %}false{% else %}'closed'{% endif %}
{% endset %}

{# // Filter panel #}
{% set filterChoice = content.field_filter_panel_display.0|render|trim  %}



{# // zoom level done via list text field #}
{% set zoomSetting = content.field_map_zoom.0|render|trim  %}

{% set filterPanel %}
{% if filterChoice == "true" %}true{% elseif filterChoice == "closed_mobile" %}'closed_mobile'{% elseif filterChoice == "false" %}false{% else %}'closed'{% endif %}
{% endset %}

{# // type of content to display on map #}
{% set toShow = content.field_content_display_types['#items'].getString() %}

{# embed coded preference field #}
{% set prefsCode = content.field_code.0 %}

{% set tagList %}
{% apply spaceless %}{{content.field_tags}}{% endapply %}
{% endset %}

{% set areaList %}
{% apply spaceless %}{{content.field_area}}{% endapply %}
{% endset %}


{# attach Richard's assets using libraries in the map_embed module #}
{{ attach_library('map_embed/cycling-uk-map') }}


{% block paragraph %}
    <div{{ attributes.addClass(classes) }}> 
      {% block content %}
      <div class="container">
        {% if content.field_title.0 is not empty %}
          <h2 class="paragraph-title text-center">{{ content.field_title.0 }}</h2>
        {% endif %}
        {% if content.field_text.0 is not empty %}
          <div class="intro">
            {{ content.field_text.0 }}
          </div>
        {% endif %}
      </div>
     
      {% if paragraph.field_location_embed_preset_type.value == "preset_postcode" %}
        <script>
            window.addEventListener("load", (event) => {
              initialiseMap('{{ map_wrapper }}', { preset: 'location', postcode: '{% apply spaceless %}{{ postalCode }}{% endapply %}', preferFlagship: true, preferRoutes: true, scrollproof: true, enableSorting: true, zoom: {{ zoomSetting }}, filterPanel: {{ filterPanel }}, allRoutes: {{ showAllRoutes }}, showPOIs: {% if 'poi_true' not in showTypes %}false{% else %}true{% endif %}, showRoutes: {% if 'route_true' not in showTypes %}false{% else %}true{% endif %}, showGroups: {% if 'group_true' not in showTypes %}false{% else %}true{% endif %}, showEvents: {% if 'event_ride_true' not in showTypes %}false{% else %}true{% endif %}, sidepanel: {{ leftPanel }}{% if tagList is not empty %}, tags: [ {{tagList}} ]{% endif %}, showRouteFilter: {% if 'route_true' not in showTypes %}false{% else %}true{% endif %}, showPOIFilter: {% if 'poi_true' not in showTypes %}false{% else %}true{% endif %}, showGroupFilter: {% if 'group_true' not in showTypes %}false{% else %}true{% endif %}, showEventFilter: {% if 'event_ride_true' not in showTypes %}false{% else %}true{% endif %}{% if prefsCode is not empty %}, preferences: { {{prefsCode}} }{% endif %} });
            })
        </script>
      {% elseif paragraph.field_location_embed_preset_type.value == "preset_lat_lon" %}
        <script>
            window.addEventListener("load", (event) => {
              initialiseMap('{{ map_wrapper }}', { preset: 'location', lat: {{ locationLat }}, lon: {{ locationLon }}, preferFlagship: true, preferRoutes: true, scrollproof: true, enableSorting: true, zoom: {{ zoomSetting }}, filterPanel: {{ filterPanel }}, allRoutes: {{ showAllRoutes }}, showPOIs: {% if 'poi_true' not in showTypes %}false{% else %}true{% endif %}, showRoutes: {% if 'route_true' not in showTypes %}false{% else %}true{% endif %}, showGroups: {% if 'group_true' not in showTypes %}false{% else %}true{% endif %}, showEvents: {% if 'event_ride_true' not in showTypes %}false{% else %}true{% endif %}, sidepanel: {{ leftPanel }}{% if tagList is not empty %}, tags: [ {{tagList}} ]{% endif %}, showRouteFilter: {% if 'route_true' not in showTypes %}false{% else %}true{% endif %}, showPOIFilter: {% if 'poi_true' not in showTypes %}false{% else %}true{% endif %}, showGroupFilter: {% if 'group_true' not in showTypes %}false{% else %}true{% endif %}, showEventFilter: {% if 'event_ride_true' not in showTypes %}false{% else %}true{% endif %}{% if prefsCode is not empty %}, preferences: { {{prefsCode}} }{% endif %} });
            })
        </script>
      {% elseif paragraph.field_location_embed_preset_type.value == "preset_area" %}
        <script>
            window.addEventListener("load", (event) => {
              initialiseMap('{{ map_wrapper }}', { preset: 'area', areaName: [ {{areaList}} ], preferFlagship: true, preferRoutes: true, scrollproof: true, enableSorting: true, showPOISidepanel: true, showRouteSidepanel: true, filterPanel: {{ filterPanel }}, showIdeas: false, showSearch: false, panToResults: false, allRoutes: {{ showAllRoutes }}, showPOIs: {% if 'poi_true' not in showTypes %}false{% else %}true{% endif %}, showRoutes: {% if 'route_true' not in showTypes %}false{% else %}true{% endif %}, showGroups: {% if 'group_true' not in showTypes %}false{% else %}true{% endif %}, showEvents: {% if 'event_ride_true' not in showTypes %}false{% else %}true{% endif %}, sidepanel: {{ leftPanel }}{% if tagList is not empty %}, tags: [ {{tagList}} ]{% endif %}, showRouteFilter: {% if 'route_true' not in showTypes %}false{% else %}true{% endif %}, showPOIFilter: {% if 'poi_true' not in showTypes %}false{% else %}true{% endif %}, showGroupFilter: {% if 'group_true' not in showTypes %}false{% else %}true{% endif %}, showEventFilter: {% if 'event_ride_true' not in showTypes %}false{% else %}true{% endif %}{% if prefsCode is not empty %}, preferences: { {{prefsCode}} }{% endif %} });
            })
        </script>
      {% endif %}
        <div id="{{ map_wrapper }}" class="mapframe">
        </div>
      {% endblock %}
    </div>

{% endblock paragraph %}

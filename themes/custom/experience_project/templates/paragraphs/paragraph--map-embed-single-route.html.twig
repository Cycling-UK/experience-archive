{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'row',
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished'
  ]
%}



{#
/**
 * I needed to pick out the uuid and title fields individually.
 * This turned into the most time consuming research/guessing 
 * to achieve what should have been so simple.
 * Getting the individual field values from the referenced node on this
 * entity reference field field_route_embed_id. Drove me nuts!
 */
#}

{% set routeTitle = paragraph.field_route_embed_id.entity.title.value %}

{% set routeUUID = paragraph.field_route_embed_id.entity.uuid.value %}



{# embed coded preference field #}
{#
/**
  * {% set prefsCode = content.field_code.0 %}
  */
#}


{# build unique id for the div that houses the embed #}
{% set map_wrapper = 'map' ~ content.uuid.0|render|trim %}


{# // Sidepanel #}
{% set sidePanelLeft = content.field_left_sidepanel.0|render|trim  %}
{% set leftPanel %}
{% if sidePanelLeft == "closed" %}'closed'{% elseif sidePanelLeft == "closed_mobile" %}'closed_mobile'{% elseif sidePanelLeft == "false" %}false{% else %}'closed'{% endif %}
{% endset %}

{# // Filter panel #}
{% set filterChoice = content.field_filter_panel_display.0|render|trim  %}

{% set filterPanel %}
{% if filterChoice == "true" %}true{% elseif filterChoice == "closed_mobile" %}'closed_mobile'{% elseif filterChoice == "false" %}false{% else %}'closed'{% endif %}
{% endset %}

{# attach Richard's assets using libraries in the map_embed module #}
{{ attach_library('map_embed/cycling-uk-map') }}

{% block paragraph %}
    <div{{ attributes.addClass(classes) }}> 
      {% block content %}
          <div class="container">
            {% if content.field_title.0 is not empty %}
              <h2 class="paragraph-title text-center">{{ content.field_title.0 }}</h2>
            {% endif %}
            {% if content.field_text.0 is not empty %}
              <div class="intro">
                {{ content.field_text.0 }}
              </div>
            {% endif %}
          </div>
        
          <h3 class="paragraph-title text-center">{{ routeTitle }}</h3>

          {# single route embed #}
            <script>
                window.addEventListener("load", (event) => {
                  initialiseMap('{% apply spaceless %}{{ map_wrapper }}{% endapply %}', { preset: 'route', routeID: '{% apply spaceless %}{{ routeUUID|render|trim }}{% endapply %}'{% if 'Off' in content.field_display_pois[0] %}, sidepanel: false, loadPOIs: false, showPOIs: false, showPOISidepanel: false, filterPanel: false{% else %}, sidepanel: {{ leftPanel }}, loadPOIs: true, showPOIs: true, showPOISidepanel: true, filterPanel: {{ filterPanel }}{% endif %}, elevation: {% if 'Off' in content.field_display_elevation[0] %}false{% elseif 'On' in content.field_display_elevation[0] %}true{% else %}true{% endif %}, preferFlagship: true, preferRoutes: true, scrollproof: true, showSearch: false, showIdeas: false  });
                })
              </script>
            <div id="{% apply spaceless %}{{ map_wrapper }}{% endapply %}" class="mapframe">
            </div>
      {% endblock %}
    </div>

{% endblock paragraph %}

{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}

{#
/**
 * DISPLAYING BLOCKS
 *
 * We will sometimes need to print blocks out within this template, e.g. Google 
 * DFP advert blocks. This can be achieved using the Twig Tweak module and the
 * following function:
 *
 * {{ drupal_block('block_machine_name') }}
 *
 * The machine names of available blocks can be found using the following drush command:
 *
 * drush ev "print_r(array_keys(\Drupal::service('plugin.manager.block')->getDefinitions()));" 
 *
 * See: https://befused.com/drupal/twig-block/
 *
 */
#}


{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('bootstrap5/node') }}
<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if label and not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}


  {# The kint module can be used to inspect variables #}
  {# {{ kint(node.field_biography_category) }} #}


  <div class="main-content mx-auto pb-4">
    <div class="row g-4"> 
      <div class="col-sm-8 col-md-6">

        {# https://www.drupal.org/forum/support/theme-development/2016-09-15/getting-keys-from-select-list #}
        {% set biographyCategoryColour = content.field_biography_category['#items'].getString() %}

        <div class="biography-image">
          <img class="{{ biographyCategoryColour }}" src="{{ file_url(node.field_image.entity.uri.value | image_style('large'))}}">
        </div>

        <div class="biography-category">
          {{ content.field_biography_category }}
        </div>

        <div class="biography-title">
          <h1>{{ node.label }}</h1>
        </div>

        <div class="biography-headline">
          {{ content.field_headline }}
        </div>

        {# Social media links #}
        <div id="cuk-biography-social-links">

          {% if node.field_facebook is not empty %}
            <a target="_blank" title="Facebook" href="{{ content.field_facebook[0]['#url'] }}"><i class="fa-brands fa-facebook-f"></i><span>Facebook</span></a>
          {% endif %}

          {% if node.field_instagram is not empty %}
            <a target="_blank" title="Instagram" href="{{ content.field_instagram[0]['#url'] }}"><i class="fa-brands fa-instagram"></i><span>Instagram</span></a>
          {% endif %}

          {% if node.field_twitter is not empty %}
            <a target="_blank" title="Twitter" href="{{ content.field_twitter[0]['#url'] }}"><i class="fa-brands fa-twitter"></i><span>Twitter</span></a>
          {% endif %}

          {% if node.field_youtube is not empty %}
            <a target="_blank" title="YouTube" href="{{ content.field_youtube[0]['#url'] }}"><i class="fa-brands fa-youtube"></i><span>YouTube</span></a>
          {% endif %}

          {% if node.field_linkedin is not empty %}
            <a target="_blank" title="YouTube" href="{{ content.field_linkedin[0]['#url'] }}"><i class="fa-brands fa-linkedin-in"></i><span>LinkedIn</span></a>
          {% endif %}

          {% if node.field_website is not empty %}
            <a target="_blank" title="Personal website" href="{{ content.field_website[0]['#url'] }}"><i class="fa-light fa-globe"></i><span>Website</span></a>
          {% endif %}

          {% if node.field_group_website is not empty %}
            <a target="_blank" class="biography-social-link biography-social-link-group-website" title="Group website" href="{{ content.field_group_website[0]['#url'] }}"><i class="fa-light fa-person-biking"></i><span>Group website</span></a>
          {% endif %}
        
        </div>

        <div class="yellow-divider"></div>

        <div class="body">
          {{ content.body }}
        </div>

      </div>
    </div>
  </div>

</article>

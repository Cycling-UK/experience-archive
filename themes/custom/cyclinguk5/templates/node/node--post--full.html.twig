{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 */
#}

{#
/**
 * DISPLAYING BLOCKS
 *
 * We will sometimes need to print blocks out within this template, e.g. Google 
 * DFP advert blocks. This can be achieved using the Twig Tweak module and the
 * following function:
 *
 * {{ drupal_block('block_machine_name') }}
 *
 * The machine names of available blocks can be found using the following drush command:
 *
 * drush ev "print_r(array_keys(\Drupal::service('plugin.manager.block')->getDefinitions()));" 
 *
 * See: https://befused.com/drupal/twig-block/
 *
 */
#}


{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
  ]
%}
{{ attach_library('bootstrap5/node') }}
<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if label and not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}


  {# The kint module can be used to inspect variables #}
  {# {{ kint(node.field_gallery_image) }} #}


  {# Page management panel #}
  {% if 'administrator_content' in user.getroles  %}
    <div class="cuk-page-management">

      <h2>Page management</h2>

      {% if node.field_page_management is not empty %}
        <div class="separator">
          <strong>Issues:</strong>
          {% for item in node.field_page_management %}
            <div>{{ item.entity.name.value }}</div>
          {% endfor %}
        </div>
      {% endif %}

      {# Date outputs can be formatted using the standard PHP variables #}
      {# These date fields needed to be checked for content first before printing otherwise the page would whitescreen #}
      {# https://drupal.stackexchange.com/questions/198570/verify-a-field-is-not-empty #}

      {% if not (node.field_review_date.isEmpty == true) and content.field_review_date is defined %}
        <div class="separator"><strong>Content review date: </strong>{{ node.field_review_date.value|date('d M Y') }}</div>
      {% endif %}

      {% if not (node.field_audit_review_date.isEmpty == true) and content.field_audit_review_date is defined %}
        <div class="separator"><strong>Audit review date: </strong>{{ node.field_review_date.value|date('d M Y') }}</div>
      {% endif %}

      {% if node.field_review_comments.0 is not empty %}
        <div><strong>Review comments:</strong></div>
        <div class="separator">{{ node.field_review_comments.0.value|raw }}</div>
      {% endif %}

      <div><a class="btn btn-danger" href="{{ path('entity.node.edit_form', {'node': node.id}) }}">{{ 'Edit'|t }}</a></div>

    </div>
  {% endif %}


  {# Display author information #}
  {% set createdDate = node.getCreatedTime|date('l, d F Y') %}
  {% if display_submitted %}
    <div class="submitted">
      <div class="submitted-picture">{{ author_picture }}</div>
      <div class="submitted-name">By {{ author_name }}</div>
      <div class="submitted-date">{{ createdDate }}</div>
    </div>
  {% endif %}


  <div class="main-content mx-auto pb-4">
    <div class="row g-4"> 
      <div class="col-md-12 col-lg-7 col-xl-8">

        {# Print the hero image and caption #}
        {# Note: the hero image needs to be upgraded to be responsive #}
        <div class="hero-image-and-caption">
          <div class="hero-image">
            <img class="rounded" src="{{ file_url(node.field_hero.entity.uri.value | image_style('manual_crop_1440x810_16_9'))}}">
          </div>
          {% if not (node.field_caption.isEmpty == true) and content.field_caption is defined %}
            <div class="caption">
              {{ content.field_caption }}
            </div>
          {% endif %}
        </div>


        {# Main page content #}
        <div class="cuk-main-page-content">
          {# Editorial #}
          <div class="teaser">{{ content.field_teaser }}</div>
          <div class="body">{{ content.body }}</div>


          {# Accordion #}
          {# There are only a handful of nodes on the outgoing Drupal 7 site that use the accordion field and it's #}
          {# not something we want to continue using. We will therefore render the accordions for these handful of #}
          {# nodes as flat text fields rather than some kind of resourceful collapsable widget. #}

          <div class="cuk-accordion">
            {% for item in node.field_accordion %}
              <h3 class="faqfield-question">{{ item.question }}</h3>
              <div class="faqfield-answer">{{ item.answer }}</div>
            {% endfor %}
          </div>

          {# Locate the additional content under the main content when viewed on mobile #}
          {# {% if node.field_additional_content is not empty %} #}
            <div class="cuk-additional-content mobile">
              <h2>This is some additional content</h2>
              <p>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Donec id elit non mi porta gravida at eget metus.</p>
              <p>Etiam porta sem malesuada magna mollis euismod. Sed posuere consectetur est at lobortis. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
            </div>
         {# {% endif %} #}


          {% if node.field_slideshow is not empty %}
            <div class="node-gallery cuk-gallery">
              {{ content.field_slideshow }}
            </div>
          {% endif %}


          {% if node.field_press_notes_to_editors is not empty %}
            <div class="cuk-notes-to-editors">
              <h2>Notes to editors</h2>
              {{ content.field_press_notes_to_editors }}
            </div>
          {% endif %}


          {% if node.field_press_contact_information is not empty %}
            <div class="cuk-press-contact-information">
              <h2>Press contact information</h2>
              {{ content.field_press_contact_information }}
            </div>
          {% endif %}

        </div>


        {# Tags #}
        <div class="cuk-tag-block">

          {# Regular tags #}
          {% for item in node.field_tags %}
            <a class="btn-default" href="{{ path('entity.taxonomy_term.canonical', {'taxonomy_term': item.entity.tid.value}) }}">{{ item.entity.name.value }}</a>
          {% endfor %}

          {# Campaigns #}
          {% for item in node.field_campaign %}
            <a class="btn-default" href="{{ path('entity.taxonomy_term.canonical', {'taxonomy_term': item.entity.tid.value}) }}">{{ item.entity.name.value }}</a>
          {% endfor %}

          {# Cycling type #}
          {% for item in node.field_cycling_type %}
            <a class="btn-default" href="{{ path('entity.taxonomy_term.canonical', {'taxonomy_term': item.entity.tid.value}) }}">{{ item.entity.name.value }}</a>
          {% endfor %}

          {# Cycling UK section #}
          {% for item in node.field_cycling_uk_section %}
            <a class="btn-default" href="{{ path('entity.taxonomy_term.canonical', {'taxonomy_term': item.entity.tid.value}) }}">{{ item.entity.name.value }}</a>
          {% endfor %}

          {# Post type #}
          {% for item in node.field_post_type %}
            <a class="btn-default" href="{{ path('entity.taxonomy_term.canonical', {'taxonomy_term': item.entity.tid.value}) }}">{{ item.entity.name.value }}</a>
          {% endfor %}

          {# Article type #}
          {% for item in node.field_article_type %}
            <a class="btn-default" href="{{ path('entity.taxonomy_term.canonical', {'taxonomy_term': item.entity.tid.value}) }}">{{ item.entity.name.value }}</a>
          {% endfor %}

        </div>


        {% if node.field_attachments is not empty %}
          <h2>Downloads</h2>
          <div class="cuk-downloads">
            {% for item in node.field_attachments %}
              {#
                August 2022 (AAM):
                Had problems with correctly getting the URI or URL of the attached media items for downloading.
                The following statements worked fine and displayed data that matched the test content:

                {{ item.entity.label }}
                {{ item.entity.id }}

                However, {{ item.entity.uri.value }} was returning random results that were not associated to the
                attached media. Note that this method is working fine elsewhere within this template, e.g. GPX files.
                Therefore, given media are stored internally as /media/{entity.id} and we can successfully retrieve
                the entity ID we can therefore do the following workaround until a better solution can be found.
              #}
              <a class="btn btn-primary" download href="/media/{{ item.entity.id }}">{{ item.entity.label|replace({'_': " "}) }}</a>
            {% endfor %}
          </div>
        {% endif %}

        {% if node.field_gpx_files is not empty %}
          <h2>GPX files</h2>
          <div class="cuk-gpx-files">
            {% for item in node.field_gpx_files %}
              {# Attempt 1: print the file description #}
              {# <li>Name: {{ item.description }}</li> #}
              {# Attempt 2: print the URL based on the entity's URI value #}
              {# <li>URL: {{ file_url(item.entity.uri.value) }}</li> #}
              {# Final: use the above components to create a download link for each GPX file #}
              <a class="btn btn-primary" download href="{{ file_url (item.entity.uri.value) }}">{{ item.description }}</a>
            {% endfor %}
          </div>
        {% endif %}

      </div>

      <div class="col-md-12 col-lg-5 col-xl-4">
        <div class="bg-light rounded p-4">

          {# Locate the additional content in the sidebar when viewed on desktop #}
          {# {% if node.field_additional_content is not empty %} #}
            <div class="cuk-additional-content desktop">
              <h2>This is some additional content</h2>
              <p>Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Donec id elit non mi porta gravida at eget metus.</p>
              <p>Etiam porta sem malesuada magna mollis euismod. Sed posuere consectetur est at lobortis. Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
            </div>
          {# {% endif %} #}

          <div class="cuk-google-dfp-advert advert-slot-1">{{ drupal_block('dfp_ad:4269bc99-dec3-494f-b321-f6c8574b7576') }}</div>
          <div class="cuk-google-dfp-advert advert-slot-2">{{ drupal_block('dfp_ad:c5b436e7-169e-4d5c-bddf-346045eb8444') }}</div>
        </div>
      </div>

    </div>
  </div>

  <div class="cuk-further-reading">
    <h2>Further reading</h2>

    {# Loop through and use the twig tweak drupal_entity function to display the 'card' view for each individual referenced entity ID #}
    <ul class="cards">
      {% for item in node.field_further_reading %}
        <li class="card">{{ drupal_entity('node', item.entity.id , 'card') }}</li>
      {% endfor %}
    </ul>
  </div>

  {% if 'administrator_content' in user.getroles  %}
    <div class="cuk-other-content rounded">
      <div class="to-do">
        <h2>To do</h2>
        <div><strong>Internal advert: </strong><span style="color:red">Disabled in form display</span></div>
      </div>

      <div class="page-management">
        <h2>Page management</h2>
        <div><strong>Call to action: </strong><span style="color:red">Disabled in form display</span></div>          
        <div><strong>Old NID: </strong>{{ node.field_old_nid.0.value }}</div>
        <div class="separator"><strong>Exclude from main feeds: </strong>{{ node.field_exclude_from_main_feeds.value }}</div>
  
        <div class="separator"><strong>Status:</strong>
          {% for item in node.field_status %}
            {{ item.entity.name.value }}
          {% endfor %}
        </div>

        {# Address fields have variables for each element, see: /docroot/modules/contrib/address/templates #}
        <div class="separator">
          <div><strong>Address:</strong></div>
          <div>Given name: {{ node.field_address.given_name }}</div>
          <div>Family name: {{ node.field_address.family_name }}</div>
          <div>Organisation: {{ node.field_address.organization }}</div>
          <div>Line 1: {{ node.field_address.address_line1 }}</div>
          <div>Line 2: {{ node.field_address.address_line2 }}</div>
          <div>Post town: {{ node.field_address.locality }}</div>
          <div>Postal code: {{ node.field_address.postal_code }}</div>
        </div>

        <div><strong>AMP image: </strong></div>
          {# https://www.drupal.org/docs/8/modules/inline-formatter-field/common-twig-patterns#s-images #}

          {# Works: displays the original image without any image styles applied #}
          {# <img src="{{ file_url(node.field_image.entity.uri.value)}}" alt="{{ node.field_image.alt }}"> #}

          {# Works: displays the image with styling via twig tweak. This field doesn't have alt text so not sure if the alt text element works yet #}
          {% for item in node.field_image %}
            <img src="{{ file_url(item.entity.uri.value | image_style('thumbnail'))}}" alt="{{ node.field_image.alt }}">
          {% endfor %}

      </div>
    </div>
  {% endif %}

</article>
